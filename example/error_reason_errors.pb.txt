// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package example

import (
	"fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	"runtime"
	"strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type Error struct {
	code    int
	reason  string
	message string
	i18n    map[string]string
	err     error
	args    []interface{}
	lang    string
}

func (e *Error) getFileLine() string {
	_, file, line, ok := runtime.Caller(2)
	if !ok {
		return ""
	}
	return file + ":" + strconv.Itoa(line)
}

func (e *Error) WithError(err error) *Error {
	e.err = err
	return e
}

func (e *Error) WithFmtMsg(args ...interface{}) *Error {
	e.args = args
	return e
}

func (e *Error) WithI18N(lang string) *Error {
	e.lang = lang
	return e
}

func (e *Error) Error() *errors.Error {
	metadata := map[string]string{}
	if e.err != nil {
		metadata["cause"] = e.err.Error()
	}
	metadata["line"] = e.getFileLine()
	message := e.message
	if e.lang != "" {
		if _, ok := e.i18n[e.lang]; ok {
			message = e.i18n[e.lang]
		}
	}
	if len(e.args) > 0 {
		message = fmt.Sprintf(message, e.args...)
	}
	return errors.New(e.code, e.reason, message).WithMetadata(metadata)
}


// 401
func ErrorUnauthorized() *Error {
	return &Error{
		code:    401,
		reason:  ErrorReason_UNAUTHORIZED.String(),
		message: "Unauthorized",
		i18n:    map[string]string{
			"en_US": "Unauthorized",
			"zh_CN": "未授权",
		},
	}
}